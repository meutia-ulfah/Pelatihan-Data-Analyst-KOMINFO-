# Overall Performance by Year #

# Buatlah Query dengan menggunakan SQL untuk mendapatkan total penjualan (sales)
# dan jumlah order (number_of_order) dari tahun 2009 sampai 2012 (years). 

SELECT YEAR(order_date) AS years, SUM(sales) as sales, COUNT(order_status) as number_of_order FROM dqlab_sales_store
WHERE order_status = "order finished"
GROUP BY years
ORDER BY years ASC;


# Overall Performance by Product Sub Category #

# Buatlah Query dengan menggunakan SQL untuk mendapatkan total penjualan (sales)
# berdasarkan sub category dari produk (product_sub_category) pada tahun 2011 dan 2012 saja (years) 

SELECT YEAR(order_date) AS years, product_sub_category, SUM(sales) AS sales FROM dqlab_sales_store
WHERE order_status = 'order finished' AND (YEAR(order_date) BETWEEN 2011 AND 2012)
GROUP BY years, product_sub_category
ORDER BY years ASC, sales DESC;


# Promotion Effectiveness and Efficiency by Product Sub Category #

# Pada bagian ini kita akan melakukan analisa terhadap efektifitas
# dan efisiensi dari promosi yang sudah dilakukan selama ini seperti pada bagian sebelumnya. 
# Akan tetapi, ada kolom yang harus ditambahkan, yaitu : product_sub_category dan product_category

SELECT YEAR(order_date) AS years,
 product_sub_category,
 product_category,
 SUM(sales) AS sales,
 SUM(discount_value) AS promotion_value,
 ROUND((SUM(discount_value)/SUM(sales))*100,2) AS burn_rate_percentage
FROM dqlab_sales_store
WHERE order_status = "Order Finished" AND Year(order_date) = 2012
GROUP BY years, product_sub_category, product_category
ORDER BY sales DESC;

# Data yang ditampilkan hanya untuk tahun 2012
# Contoh output di atas hanya 5 baris pertama dari output yang diharapkan


#Customers Transactions per Year #

# DQLab Store ingin mengetahui jumlah customer (number_of_customer) yang bertransaksi setiap tahun dari 2009 sampai 2012 (years).

SELECT YEAR(order_date) AS years, COUNT(DISTINCT customer) AS number_of_customer
FROM dqlab_sales_store
WHERE order_status = "Order Finished"
GROUP BY years
ORDER BY years ASC;

